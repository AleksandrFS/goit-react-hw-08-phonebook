{"version":3,"file":"static/js/517.c9f3169d.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"nameInput\":\"ContactForm_nameInput__QSf3L\",\"numberInput\":\"ContactForm_numberInput__fY5H2\",\"input\":\"ContactForm_input__Bl93P\",\"btnAddContact\":\"ContactForm_btnAddContact__AepU1\"};","import { nanoid } from 'nanoid';\nimport { useState } from 'react';\nimport css from './ContactForm.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContactsThunk } from 'redux/contacts/contactsOperations';\n\nexport const ContactForm = () => {\n  const { contacts } = useSelector(state => state.contacts);\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleInputChange = e => {\n    const name = e.target.name;\n    switch (name) {\n      case 'name':\n        setName(e.target.value);\n        break;\n      case 'number':\n        setNumber(e.target.value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const newContact = { name: name, number: number };\n\n  const handleSubmit = e => {\n    e.preventDefault(e);\n    contacts.find(contact => contact.name === name)\n      ? alert(`${name} is already in contacts`)\n      : dispatch(addContactsThunk(newContact));\n\n    setName('');\n    setNumber('');\n  };\n\n  const nameInputId = nanoid();\n  const numberImputId = nanoid();\n  return (\n    <div>\n      <form onSubmit={handleSubmit} className={css.form}>\n        <div className={css.nameInput}>\n          <label htmlFor={nameInputId} className={css.label}>\n            Name\n          </label>\n          <input\n            id={nameInputId}\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleInputChange}\n            className={css.input}\n          />\n        </div>\n        <div className={css.numberInput}>\n          <label htmlFor={numberImputId} className={css.label}>\n            Number\n          </label>\n          <input\n            id={numberImputId}\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleInputChange}\n            pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            className={css.input}\n          />\n        </div>\n\n        <button type=\"submit\" className={css.btnAddContact}>\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\",\"list\":\"ContactList_list__csErn\",\"contact\":\"ContactList_contact__0STHS\",\"btnDelete\":\"ContactList_btnDelete__Eeo9v\"};","import css from './ContactList.module.css';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filterForContacts } from 'redux/contacts/filterContactsSlice';\nimport {\n  getContactsThunk,\n  deleteContactsThunk,\n} from 'redux/contacts/contactsOperations';\nimport { useEffect } from 'react';\nimport { Spinner } from 'components/Loader/Loader';\n\nexport const ContactList = () => {\n  const { contacts, error, isLoading } = useSelector(state => state.contacts);\n  const filter = useSelector(filterForContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <>\n      {isLoading && <Spinner />}\n      {error && <p>error</p>}\n      {filteredContacts && (\n        <ul className={css.list}>\n          {filteredContacts.map(({ name, number, id }) => (\n            <li key={id} className={css.contactList}>\n              <div className={css.contact}>\n                <p>\n                  {name}: {number}\n                </p>\n                <button\n                  type=\"button\"\n                  onClick={() => dispatch(deleteContactsThunk(id))}\n                  className={css.btnDelete}\n                >\n                  Delete\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"Filter_input__N7T3z\"};","import { useDispatch } from 'react-redux';\nimport { filterContact } from 'redux/contacts/filterContactsSlice';\n\nimport css from './Filter.module.css';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleInputChange = e => {\n    dispatch(filterContact(e.target.value));\n  };\n\n  return (\n    <div>\n      <h3>Find contacts by name</h3>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        onChange={handleInputChange}\n        className={css.input}\n      ></input>\n    </div>\n  );\n};\n","import { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { ContactList } from \"components/ContactList/ContactList\";\nimport { Filter } from \"components/Filter/Filter\";\n\n const Contacts = () => {\n    return (\n      <>\n        <h2>Phonebook</h2>\n        <ContactForm />\n        <Filter />\n        <ContactList />\n      </>\n    );\n}\nexport default Contacts;"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","ContactForm","contacts","useSelector","state","dispatch","useDispatch","useState","name","setName","number","setNumber","handleInputChange","e","target","value","newContact","nameInputId","numberImputId","onSubmit","preventDefault","find","contact","alert","addContactsThunk","className","css","htmlFor","type","onChange","pattern","title","required","ContactList","error","isLoading","filter","filterForContacts","useEffect","getContactsThunk","filteredContacts","toLowerCase","includes","map","onClick","deleteContactsThunk","Filter","filterContact"],"sourceRoot":""}